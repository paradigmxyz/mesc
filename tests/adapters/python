#!/usr/bin/env python3

from __future__ import annotations

import argparse
import json
from typing import Sequence, cast, Union

from mesc.types import Endpoint, EndpointQuery
import mesc


def run_query(query: EndpointQuery) -> Union[Endpoint, Sequence[Endpoint], None]:
    if query["query_type"] == "default_endpoint":
        default_fields = cast(mesc.types.DefaultEndpointQuery, query["fields"])
        return mesc.get_default_endpoint(**default_fields)
    elif query["query_type"] == "endpoint_by_name":
        name_fields = cast(mesc.types.EndpointNameQuery, query["fields"])
        return mesc.get_endpoint_by_name(**name_fields)
    elif query["query_type"] == "endpoint_by_network":
        network_fields = cast(mesc.types.EndpointNetworkQuery, query["fields"])
        return mesc.get_endpoint_by_network(**network_fields)
    elif query["query_type"] == "user_input":
        user_input_fields = cast(mesc.types.UserInputQuery, query["fields"])
        return mesc.get_endpoint_by_query(**user_input_fields)
    elif query["query_type"] == "multi_endpoint":
        multi_endpoint_fields = cast(mesc.types.MultiEndpointQuery, query["fields"])
        return mesc.find_endpoints(**multi_endpoint_fields)
    elif query["query_type"] == "global_metadata":
        return mesc.get_global_metadata(**query["fields"])
    else:
        raise Exception("invalid query type: " + str(query["query_type"]))


if __name__ == "__main__":
    # load test
    parser = argparse.ArgumentParser()
    parser.add_argument("test")
    args = parser.parse_args()
    test = json.loads(args.test)

    # run test
    try:
        result = run_query(test)
        print(json.dumps(result))
    except Exception as e:
        print("FAIL")
        print(repr(e))
